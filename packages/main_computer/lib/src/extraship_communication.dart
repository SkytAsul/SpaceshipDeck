// Openapi Generator last run: : 2025-07-18T18:24:52.030561
import 'dart:io';

import 'package:main_computer/src/kernel.dart';
import 'package:openapi_generator_annotations/openapi_generator_annotations.dart';
import 'package:sembast/sembast.dart';
import 'package:sembast/timestamp.dart';
import 'package:space_traders/api.dart';

@Openapi(
  inputSpec: RemoteSpec(
    path: "https://api.spacetraders.io/v2/documentation/json",
  ),
  generatorName: Generator.dart,
  outputDirectory: "space_traders_api",
  additionalProperties: AdditionalProperties(
    pubName: "space_traders",
    pubDescription: "Autogenerated code to interact with the SpaceTraders API",
  ),
  skipIfSpecIsUnchanged: false,
)
class SpaceTradersApiGenerator {}

class _ExtrashipCommunication {
  static const _accountTokenEnvVar = "SPACETRADERSAPI_TOKEN";

  final KernelUnitContext context;

  ApiClient? _client;
  ApiClient get client => _client!;

  _ExtrashipCommunication(this.context);

  Future<Agent> loadAgent() async {
    var db = context.kernel.get<Database>()!;
    var tokensStore = intMapStoreFactory.store("stapi_tokens");

    Future<Agent> generateToken() async {
      var (agent, token) = await _registerAgent();
      await tokensStore.add(db, {"token": token, "timestamp": Timestamp.now()});
      return agent;
    }

    var lastTokenRecord = await tokensStore.findFirst(
      db,
      finder: Finder(sortOrders: [SortOrder("timestamp", false)]),
    );

    if (lastTokenRecord == null) {
      return generateToken();
    }

    _client = ApiClient(
      authentication: HttpBearerAuth()
        ..accessToken = lastTokenRecord.value["token"],
    );

    try {
      final agentResult = await AgentsApi(_client).getMyAgent();
      return agentResult!.data;
    } on ApiException catch (ex) {
      _client?.client.close();
      if (ex.message?.contains('"code":4113') ?? false) {
        context.logger.warning(
          "The agent token is outdated. Generating a new one.",
        );
        return await generateToken();
      } else {
        rethrow;
      }
    } catch (_) {
      _client?.client.close();
      rethrow;
    }
  }

  Future<(Agent, String token)> _registerAgent() async {
    if (!Platform.environment.containsKey(_accountTokenEnvVar)) {
      throw Exception("$_accountTokenEnvVar is not defined");
    }

    String accountToken = Platform.environment[_accountTokenEnvVar]!;
    _client = ApiClient(
      authentication: HttpBearerAuth()..accessToken = accountToken,
    );

    try {
      final registerResult = await AccountsApi(_client).register(
        RegisterRequest(symbol: "5KYT4SUL", faction: FactionSymbol.COSMIC),
      );

      final agentToken = registerResult!.data.token;

      context.logger.fine("Registered new agent. Written token.");

      _client = ApiClient(
        authentication: HttpBearerAuth()..accessToken = agentToken,
      );
      return (registerResult.data.agent, agentToken);
    } catch (ex) {
      _client?.client.close();
      rethrow;
    }
  }
}

KernelService getExtraShipCommunicationService() {
  return KernelService<_ExtrashipCommunication>(
    name: "Extra-ship Communications",
    start: (context) async {
      final comm = _ExtrashipCommunication(context);
      final agent = await comm.loadAgent();

      context.logger.info("Hello ${agent.symbol}!");

      context.expose<ApiClient>(comm.client);

      return comm;
    },
    stop: (comm) => comm.client.client.close(),
  );
}
