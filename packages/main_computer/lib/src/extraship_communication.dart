// Openapi Generator last run: : 2025-07-18T18:24:52.030561
import 'dart:io';

import 'package:main_computer/src/kernel.dart';
import 'package:openapi_generator_annotations/openapi_generator_annotations.dart';
import 'package:space_traders/api.dart';

@Openapi(
  inputSpec: RemoteSpec(
    path: "https://api.spacetraders.io/v2/documentation/json",
  ),
  generatorName: Generator.dart,
  outputDirectory: "space_traders_api",
  additionalProperties: AdditionalProperties(
    pubName: "space_traders",
    pubDescription: "Autogenerated code to interact with the SpaceTraders API",
  ),
  skipIfSpecIsUnchanged: false,
)
class SpaceTradersApiGenerator {}

class _ExtrashipCommunication {
  static const _accountTokenEnvVar = "SPACETRADERSAPI_TOKEN";

  final agentInfoFile = File(
    "${Platform.environment["HOME"]}/.spaceship_agent",
  );
  final KernelUnitContext context;

  ApiClient? _client;
  ApiClient get client => _client!;

  _ExtrashipCommunication(this.context);

  Future<Agent> loadAgent() async {
    if (await agentInfoFile.exists()) {
      var agentToken = await agentInfoFile.readAsString();
      agentToken = agentToken.trimRight();

      _client = ApiClient(
        authentication: HttpBearerAuth()..accessToken = agentToken,
      );

      try {
        final agentResult = await AgentsApi(_client).getMyAgent();
        return agentResult!.data;
      } on ApiException catch (ex) {
        _client?.client.close();
        if (ex.message?.contains('"code":4113') ?? false) {
          context.logger.warning(
            "The agent token is outdated. Generating a new one.",
          );
          return await _registerAgent();
        } else {
          rethrow;
        }
      } catch (_) {
        _client?.client.close();
        rethrow;
      }
    } else {
      return await _registerAgent();
    }
  }

  Future<Agent> _registerAgent() async {
    String accountToken = Platform.environment[_accountTokenEnvVar]!;
    _client = ApiClient(
      authentication: HttpBearerAuth()..accessToken = accountToken,
    );

    try {
      final registerResult = await AccountsApi(_client).register(
        RegisterRequest(symbol: "5KYT4SULL", faction: FactionSymbol.COSMIC),
      );

      final agentToken = registerResult!.data.token;
      await agentInfoFile.writeAsString(agentToken);

      context.logger.fine("Registered new agent. Written token.");

      _client = ApiClient(
        authentication: HttpBearerAuth()..accessToken = agentToken,
      );
      return registerResult.data.agent;
    } catch (ex) {
      _client?.client.close();
      rethrow;
    }
  }
}

KernelService getExtraShipCommunicationService() {
  return KernelService<_ExtrashipCommunication>(
    name: "Extra-ship Communications",
    start: (context) async {
      final comm = _ExtrashipCommunication(context);
      final agent = await comm.loadAgent();

      context.logger.info("Hello ${agent.symbol}!");

      context.expose<ApiClient>(comm.client);

      return comm;
    },
    stop: (comm) => comm.client.client.close(),
  );
}